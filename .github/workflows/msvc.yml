name: build_msvc

on:
  workflow_call:
    outputs:
      name:
        description: "The artifact name"
        value: ${{ jobs.build_msvc.outputs.name }}

jobs:
  build_msvc:

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]
        qt_version: [6.6.0, 6.5.2, 5.15.2, 5.12.12]

        include:
          - triplet: x64-windows
            qt_version: 6.6.0
            qt_arch: win64_msvc2019_64
            CMAKE_GENERATOR_PLATFORM: x64
            VCPKG_PLATFORM_TOOLSET: v142
            qt_modules: 'qtscxml qtmultimedia qtimageformats qtwebchannel qtwebsockets qtwebview qtpositioning'
            update_artifact: true

          - triplet: x64-windows
            qt_version: 6.5.2
            qt_arch: win64_msvc2019_64
            CMAKE_GENERATOR_PLATFORM: x64
            VCPKG_PLATFORM_TOOLSET: v142
            qt_modules: 'qtscxml qtmultimedia qtimageformats qtwebchannel qtwebsockets qtwebview qtpositioning'

          - triplet: x64-windows
            qt_version: 5.15.2
            qt_arch: win32_msvc2019
            CMAKE_GENERATOR_PLATFORM: Win32
            VCPKG_PLATFORM_TOOLSET: v142
            update_artifact: true

          - triplet: x86-windows
            qt_version: 5.12.12
            qt_arch: win32_msvc2017
            CMAKE_GENERATOR_PLATFORM: Win32
            VCPKG_PLATFORM_TOOLSET: v141

    runs-on: windows-latest

    env:
      artifact_name: build_msvc
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOSL_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install_msvc_${{matrix.triplet}}_${{matrix.BUILD_TYPE}}
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_GENERATOR_PLATFORM: ${{matrix.CMAKE_GENERATOR_PLATFORM}}
      VCPKG_PLATFORM_TOOLSET: ${{matrix.VCPKG_PLATFORM_TOOLSET}}
      ChineseChessControl_VERSION: "v2.0.11"
      VCPKGGITCOMMITID: 43cf47eccfbe27006cf9534a5db809798f8c37fe
      qt_modules: 'qtwebengine ${{matrix.qt_modules}}'

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}
  
    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: make directory
        run: |
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOSL_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}
          cmake -E make_directory ${{github.workspace}}/build

      - name: Cache installed
        uses: actions/cache@v2
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: msvc_cache_installed_qt${{matrix.qt_version}}

      - name: run-vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgGitCommitId: ${{env.VCPKGGITCOMMITID}}
          vcpkgDirectory: ${{runner.workspace}}/vcpkg/
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: cache-vcpkg-msvc-${{matrix.triplet}}-qt${{matrix.qt_version}}-${{matrix.BUILD_TYPE}}-${{env.VCPKGGITCOMMITID}}
          vcpkgTriplet: '${{matrix.triplet}}'
          vcpkgArguments: 'zlib openssl'

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ${{env.TOOSL_DIR}}/qt
          key: qt${{matrix.qt_version}}-${{matrix.qt_arch}}

      - name: Install Qt
        # You may pin to the exact commit or the version.
        # uses: jurplel/install-qt-action@a962fb91949c8e846a3e4a944d50e7ef5cc3a28a
        uses: jurplel/install-qt-action@v3.2.1
        with:
          # Directory to install Qt
          dir: ${{env.TOOSL_DIR}}/qt # optional
          # Version of Qt to install
          version: ${{matrix.qt_version}} # optional, default is 5.15.2
          # Host platform
          #host: linux # optional
          # Target platform for build
          #target: desktop # optional, default is desktop
          # Architecture for Windows/Android
          arch: ${{matrix.qt_arch}} # optional
          # Whether or not to install Qt dependencies on Linux
          #install-deps: true # optional, default is true
          # Additional Qt modules to install
          modules: '${{env.qt_modules}}' # optional. See: https://ddalcino.github.io/aqt-list-server/
          # Force a Qt mirror in case the default is not working
          #mirror: # optional
          # Whether or not to actually download Qt
          cache: ${{ steps.cache-qt.outputs.cache-hit }} # optional, default is false
          # Whether or not to automatically run setup-python to find a valid python version.
          #setup-python: false # optional, default is true
          # Qt tools to download--specify comma-separated argument lists which are themselves separated by spaces: <tool_name>,<tool_version>,<tool_arch>
          #tools: # optional
          # Whether or not to actually install Qt or just the tools from the tools argument
          #tools-only: false # optional, default is false
          # Version of aqtinstall to use in case of issues
          #aqtversion: # optional, default is ==0.10.0
          # Version of py7zr to use in case of issues
          #py7zrversion: # optional, default is ==0.11.0
          # Any extra arguments to append to the back
          #extra: # optional

      - name: git clone RabbitCommon
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          git clone https://github.com/KangLin/RabbitCommon.git

      - name: build ChineseChessControl
        working-directory: ${{github.workspace}}/build
        env:
          RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
        run: |
          cmake ${{github.workspace}} ^
              -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
              -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
              -DCMARK_SHARED=OFF ^
              -DCMARK_TESTS=OFF ^
              -DCMARK_STATIC=ON ^
              -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
              -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install ^
              -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake ^
              -DVCPKG_VERBOSE=ON ^
              -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON
          cmake --build . --config ${{matrix.BUILD_TYPE}}

      - name: Package
        if: ${{ matrix.BUILD_TYPE == 'Release' }}
        working-directory: ${{github.workspace}}\build
        run: |
          cmake --install . --config ${{matrix.BUILD_TYPE}} --component=MFCApplications
          cmake --install . --config ${{matrix.BUILD_TYPE}} --component=MFCRuntime
          cmake --install . --config ${{matrix.BUILD_TYPE}} --component=QtApplications
          cmake --install . --config ${{matrix.BUILD_TYPE}} --component=QtRuntime
          cmake --install . --config ${{matrix.BUILD_TYPE}} --component=Runtime
          cmake --install . --config ${{matrix.BUILD_TYPE}} --component=DependLibraries
          copy /Y ${{env.INSTALL_DIR}}\bin\*.dll install\bin
          copy /Y ${{env.INSTALL_DIR}}\lib\*.dll install\bin
          copy /Y ${{env.RUNVCPKG_VCPKG_ROOT}}\installed\${{env.RUNVCPKG_VCPKG_TRIPLET_OUT}}\bin\*.dll install\bin
          makensis Install.nsi
          cmake --install . --config ${{matrix.BUILD_TYPE}} --prefix=%CD%\install_develop --component=MFCDevelopment
          cmake --install . --config ${{matrix.BUILD_TYPE}} --prefix=%CD%\install_develop --component=QtDevelopment
          cmake --install . --config ${{matrix.BUILD_TYPE}} --prefix=%CD%\install_develop --component=Development
          7z a ChineseChessControl_${{env.ChineseChessControl_VERSION}}_${{matrix.qt_arch}}_Qt${{matrix.qt_version}}_Develop.zip %CD%\install_develop\.
          cmake --build . --config ${{ matrix.BUILD_TYPE }} --target package

      - name: Update artifact
        if: ${{ matrix.BUILD_TYPE == 'Release' && matrix.update_artifact }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: |
            ${{github.workspace}}\build\chinesechesscontrol_*.exe
            ${{github.workspace}}\build\ChineseChessControl_${{env.ChineseChessControl_VERSION}}_${{matrix.qt_arch}}_Qt${{matrix.qt_version}}_Develop.zip
