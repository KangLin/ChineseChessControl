name: "CodeQL"

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  analyze:
    permissions:
      security-events: write
    name: Analyze

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]
        language: [ 'cpp' ]

    runs-on: ubuntu-latest

    env:
      BUILD_TYPE:  ${{ matrix.BUILD_TYPE }}
      SOURCE_DIR:  ${{github.workspace}}/.cache/source
      TOOSL_DIR:   ${{github.workspace}}/.cache/tools
      INSTALL_DIR: ${{github.workspace}}/.cache/install_ubuntu
      ChineseChessControl_VERSION: "2.0.6"
      artifact_name: build_ubuntu

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      # - name: Autobuild
      #   uses: github/codeql-action/autobuild@v2

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö https://git.io/JvXDl

      # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language
      
      - name: make_directory
        run: |
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOSL_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}
          cmake -E make_directory ${{github.workspace}}/build

      - name: apt helper action
        uses: ryankurte/action-apt@v0.2.0
        with:
          # architectures to pass to dpkg --add-architecture
          #architectures: # optional
          # apt packages to install
          packages: xvfb xpra libglu1-mesa-dev libpulse-mainloop-glib0 cmake build-essential debhelper fakeroot graphviz doxygen qttools5-dev qttools5-dev-tools qtbase5-dev qtbase5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqtermwidget5-0-dev qtwebengine5-dev

      - name: Cache installed
        uses: actions/cache@v2
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: cache-installed-ubuntu-${{matrix.os}}-${{matrix.BUILD_TYPE}}

      - name: git clone RabbitCommon
        working-directory: ${{env.SOURCE_DIR}}
        run: git clone https://github.com/KangLin/RabbitCommon.git

      - name: build ChineseChessControl
        working-directory: ${{github.workspace}}/build
        env:
          RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
        run: |
          cmake ${{github.workspace}} \
            -DCMARK_SHARED=OFF \
            -DCMARK_TESTS=OFF \
            -DCMARK_STATIC=ON \
            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install
          cmake --build . --config ${{matrix.BUILD_TYPE}}
          cpack -G "DEB;STGZ"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
